import asyncio
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from telethon.sync import TelegramClient

# –¢–µ–ª–µ–≥—Ä–∞–º-–¥–∞–Ω–Ω—ã–µ (–∑–∞–º–µ–Ω–∏ —Å–≤–æ–∏–º–∏)
API_ID = 27662006  # –¢–≤–æ–π API ID –∏–∑ my.telegram.org
API_HASH = "64be3da191471db68ef69b728a677bf6"  # –¢–≤–æ–π API HASH
SESSION_NAME = "anon"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Telethon (—Å–æ–∑–¥–∞—Å—Ç—Å—è —Ñ–∞–π–ª anon.session)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7689644925:AAFq-B3A7rRfyTYbREelzx-YafgF5NGPMYQ"

# –§–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
CONFIG_FILE = "config.json"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon-–∫–ª–∏–µ–Ω—Ç
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
client.start()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞–¥–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç")],
        [KeyboardButton(text="üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞")],
        [KeyboardButton(text="üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫"), KeyboardButton(text="‚õî –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫")],
    ], resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"auto_reply": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", "contacts": [], "enabled": False}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
config = load_config()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def is_user_online(username):
    try:
        user = await client.get_entity(username)
        if user.status and hasattr(user.status, 'was_online'):
            return False  # –ë—ã–ª –æ–Ω–ª–∞–π–Ω –Ω–µ–¥–∞–≤–Ω–æ
        return True  # –ù–µ –≤ —Å–µ—Ç–∏
    except Exception:
        return False  # –û—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä—ã—Ç—ã–π —Å—Ç–∞—Ç—É—Å)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.", reply_markup=main_keyboard)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
@dp.message(lambda message: message.text == "üìù –ó–∞–¥–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç")
async def set_auto_reply(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
@dp.message(lambda message: message.text and message.text != "üìù –ó–∞–¥–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç")
async def save_auto_reply(message: Message):
    config["auto_reply"] = message.text
    save_config(config)
    await message.answer(f"‚úÖ –ù–æ–≤—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n\"{message.text}\"")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(lambda message: message.text == "üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞")
async def show_contacts(message: Message):
    contacts = "\n".join(config["contacts"]) if config["contacts"] else "–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤."
    await message.answer(f"üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞:\n{contacts}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –∫–æ–Ω—Ç–∞–∫—Ç–∞ (@username), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.")

@dp.message(lambda message: message.text and message.text.startswith("@"))
async def toggle_contact(message: Message):
    contact = message.text[1:]  # –£–±–∏—Ä–∞–µ–º "@"
    if contact in config["contacts"]:
        config["contacts"].remove(contact)
        action = "—É–¥–∞–ª–µ–Ω"
    else:
        config["contacts"].append(contact)
        action = "–¥–æ–±–∞–≤–ª–µ–Ω"
    save_config(config)
    await message.answer(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç @{contact} {action} –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.")

# –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
@dp.message(lambda message: message.text == "üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫")
async def enable_auto_reply(message: Message):
    config["enabled"] = True
    save_config(config)
    await message.answer("‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω!")

# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
@dp.message(lambda message: message.text == "‚õî –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫")
async def disable_auto_reply(message: Message):
    config["enabled"] = False
    save_config(config)
    await message.answer("‚õî –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç)
@dp.message()
async def auto_reply(message: Message):
    if config["enabled"] and message.from_user.username in config["contacts"]:
        if await is_user_online(message.from_user.username):
            await message.answer(config["auto_reply"])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
